package org.qkdlab.zksnark.zkvalidator;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.qkdlab.zksnark.model.message.ProofMessage;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Base64;
import java.util.Locale;


public class ValidatorGUI {
    private JPanel mainPanel;
    private JTextField readerTextField;
    private JLabel readerLabel;
    private JTextField cardTextField;
    private JLabel cardLabel;
    private JTextArea proofTextArea;
    private JTextField keySizeTextField;
    private JLabel keySizeLabel;
    private JLabel statusLabel;
    private JPanel proofPanel;
    private JPanel infoPanel;
    private JLabel rootOkLabel;
    private JLabel nullifierOkLabel;
    private JLabel proofOkLabel;
    private JTextField publicKeyTextField;

    public void init(String name) {
        JFrame frame = new JFrame(name);

        frame.setContentPane(mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setSize(new Dimension(800, 500));
        //frame.getContentPane().setPreferredSize();

        frame.setVisible(true);
    }

    public void setReaderName(String ioManagerName) {
        readerTextField.setText(ioManagerName);
    }

    public void notifyNewConnection(String name) {
        reset();

        cardTextField.setText(name);
        proofTextArea.setText("");
        updateStatusLabel("Reading proof...");
    }

    private void reset() {
        resetOkLabel(rootOkLabel);
        resetOkLabel(proofOkLabel);
        resetOkLabel(nullifierOkLabel);
    }


    public void showProofMessage(ProofMessage proofMessage) {
        //proofPanel.setVisible(true);

        proofTextArea.setText(proofMessage.getZkProof().toString());
        keySizeTextField.setText(String.valueOf(proofMessage.getKeySize()));
        publicKeyTextField.setText(proofMessage.getEncodedPublicKey());

        updateStatusLabel("Validating proof...");
    }

    public void setRootOkLabel(boolean ok) {
        setOkLabel(rootOkLabel, ok);
    }

    public void setNullifierOkLabel(boolean ok) {
        setOkLabel(nullifierOkLabel, ok);
    }

    public void setProofOkLabel(boolean ok) {
        setOkLabel(proofOkLabel, ok);
    }

    private void setOkLabel(JLabel label, boolean ok) {
        if (ok) {
            label.setText("OK");
            label.setForeground(Color.GREEN);
        } else {
            label.setText("ERROR");
            label.setForeground(Color.RED);
            updateStatusLabel("Error validating proof.");
        }
    }

    private void resetOkLabel(JLabel label) {
        label.setText("...");
        label.setForeground(Color.BLACK);
    }

    public void setSentKey(byte[] key) {
        updateStatusLabel("Key sent: " + Base64.getEncoder().encodeToString(key));
    }

    private void updateStatusLabel(String text) {
        statusLabel.setText(text);
    }

    public void showTransmissionError(String reason) {
        updateStatusLabel("Transmission Error: " + reason);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        mainPanel.setMinimumSize(new Dimension(302, 237));
        proofPanel = new JPanel();
        proofPanel.setLayout(new GridLayoutManager(4, 6, new Insets(0, 0, 0, 0), -1, -1));
        proofPanel.setEnabled(false);
        proofPanel.setFocusCycleRoot(false);
        proofPanel.setVisible(true);
        mainPanel.add(proofPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        proofTextArea = new JTextArea();
        proofTextArea.setEditable(false);
        proofTextArea.setLineWrap(true);
        proofPanel.add(proofTextArea, new GridConstraints(0, 0, 1, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        keySizeTextField = new JTextField();
        proofPanel.add(keySizeTextField, new GridConstraints(2, 2, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        keySizeLabel = new JLabel();
        keySizeLabel.setText("Requested Key Size");
        proofPanel.add(keySizeLabel, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(114, 15), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Root:");
        proofPanel.add(label1, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        proofOkLabel = new JLabel();
        Font proofOkLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, proofOkLabel.getFont());
        if (proofOkLabelFont != null) proofOkLabel.setFont(proofOkLabelFont);
        proofOkLabel.setText("...");
        proofPanel.add(proofOkLabel, new GridConstraints(3, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Nullifier:");
        proofPanel.add(label2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(59, 15), null, 0, false));
        nullifierOkLabel = new JLabel();
        Font nullifierOkLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, nullifierOkLabel.getFont());
        if (nullifierOkLabelFont != null) nullifierOkLabel.setFont(nullifierOkLabelFont);
        nullifierOkLabel.setText("...");
        proofPanel.add(nullifierOkLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Proof:");
        proofPanel.add(label3, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rootOkLabel = new JLabel();
        Font rootOkLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, rootOkLabel.getFont());
        if (rootOkLabelFont != null) rootOkLabel.setFont(rootOkLabelFont);
        rootOkLabel.setText("...");
        proofPanel.add(rootOkLabel, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Public Key");
        proofPanel.add(label4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        publicKeyTextField = new JTextField();
        publicKeyTextField.setText("");
        proofPanel.add(publicKeyTextField, new GridConstraints(1, 2, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        statusLabel = new JLabel();
        statusLabel.setBackground(new Color(-1644826));
        Font statusLabelFont = this.$$$getFont$$$(null, -1, 14, statusLabel.getFont());
        if (statusLabelFont != null) statusLabel.setFont(statusLabelFont);
        statusLabel.setForeground(new Color(-9868951));
        statusLabel.setHorizontalAlignment(0);
        statusLabel.setOpaque(true);
        statusLabel.setText("Waiting for card connection");
        mainPanel.add(statusLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        infoPanel = new JPanel();
        infoPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(infoPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        readerLabel = new JLabel();
        readerLabel.setText("Reader Name");
        infoPanel.add(readerLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cardLabel = new JLabel();
        cardLabel.setText("Card Name");
        infoPanel.add(cardLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        readerTextField = new JTextField();
        readerTextField.setEditable(false);
        readerTextField.setText("No reader connected");
        infoPanel.add(readerTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        cardTextField = new JTextField();
        cardTextField.setEditable(false);
        cardTextField.setText("No card connected");
        infoPanel.add(cardTextField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
